# Generated by Django 2.2.20 on 2021-09-08 09:07

from django.db import migrations


def populate_classifier_status(apps, schema_editor):
    Classifier = apps.get_model('vision_backend', 'Classifier')

    for classifier in Classifier.objects.all():
        if classifier.valid:
            # We have to hardcode the status codes, since the model class's
            # constants aren't available in migrations.
            # https://stackoverflow.com/questions/60414520/model-constants-not-available-in-data-migrations
            classifier.status = 'AC'
        else:
            if classifier.accuracy is not None:
                # Classifier finished training. But was marked as invalid, so
                # must have been rejected for low accuracy.
                classifier.status = 'RJ'
            else:
                # Classifier did not finish training. Either training got an
                # error, or training is still pending. The vast majority of
                # cases should be error. In the off-chance that a classifier is
                # pending training when this migration is run, setting as error
                # here doesn't hurt anyway - since once training completes, the
                # status should get updated to the correct status.
                classifier.status = 'ER'

        classifier.save()


class Migration(migrations.Migration):

    dependencies = [
        ('vision_backend', '0002_classifier_status'),
    ]

    operations = [
        migrations.RunPython(
            populate_classifier_status, migrations.RunPython.noop),
    ]
