# This is an example .env file. Create a file called `.env` in the same
# directory as this file. Fill in the contents of your .env file by following
# this file's example.
# Lines preceded with # are comments. Comments are allowed in .env as well.


#
# Media storage
#
# In most cases, you'll probably want to have these 2 settings blocks in your
# .env and then choose one block to un-comment at any given time. If you're
# just getting started, then choose local media storage.
#

# A. Local media storage
SETTINGS_BASE=dev-local
DATABASE_NAME=coralnet
DATABASE_USER=django
DATABASE_PASSWORD=password_goes_here

# B. S3 media storage
# You'll want this to be a different database from your local media one,
# because a CoralNet environment can only be configured to support local or
# S3 media, not both. The database itself can still live on your local machine.
# You'll want to create your own S3 bucket. Don't use one of the CoralNet
# S3 buckets related to the production site.
#SETTINGS_BASE=dev-s3
#DATABASE_NAME=coralnets3
#DATABASE_USER=django
#DATABASE_PASSWORD=password_goes_here
#AWS_STORAGE_BUCKET_NAME=bucket-goes-here


#
# AWS access
#

# Required for S3 media storage, and for various cases involving spacer.
#AWS_ACCESS_KEY_ID=KEYGOESHERE
#AWS_SECRET_ACCESS_KEY=SECRETACCESSKEY/GOESHERE


#
# Secret key
#

# Generate a SECRET_KEY by activating the project's Python environment,
# typing `python` to enter a Python shell, and typing this:
#
# from django.core.management.utils import get_random_secret_key
# print(get_random_secret_key())
#
# Then paste that key after the equals sign below.
SECRET_KEY=


#
# Asynchronous tasks and spacer
#

# Normally we replace the feature extractor with a dummy one for faster
# processing when DEBUG is True. However, if you need the real one to run
# even in a dev environment, then use this.
#FORCE_DUMMY_EXTRACTOR=False

# If not using a dummy feature extractor, this setting must be specified, and
# the feature extractor files need to live at the root of this bucket.
#EXTRACTORS_BUCKET=bucket-name-here

# Normally we use a local-filesystem task queue for faster processing + easier
# setup when DEBUG is True. However, if you need to test the AWS Batch based
# queue, then use this.
# Requires S3 media storage, not local storage.
# Also, you should set SPACER_JOB_HASH if using this.
#SPACER_QUEUE_CHOICE=vision_backend.queues.BatchQueue

# Normally we make huey run async tasks immediately after they're queued for
# convenience when DEBUG is True. However, if you need the tasks to be
# time-delayed as they would be in production, then use this.
#HUEY_IMMEDIATE=False

# Normally if huey is running, any periodic tasks CoralNet has defined
# will run (alongside explicitly queued tasks). However, if you only want to
# run the explicitly queued tasks without running the periodic ones for
# whatever reason, then use this.
#HUEY_CONSUMER_PERIODIC=False

# Sometimes you want to run your development server with the ``DEBUG = False``
# setting to test something - for example, the 404 and 500 error pages.
# If so:
#
# 1. Use the DEBUG=False line below
# 2. Run a separate web server which serves your MEDIA_ROOT directory, and
#  enter the server's URL as the MEDIA_URL.
#  For example, cd to your MEDIA_ROOT and enter `python -m http.server 8070`.
#  Or, serve with CORS as shown here: https://stackoverflow.com/a/21957017
# 3. Run `python manage.py collectstatic` to populate your STATIC_ROOT
#  directory, run a separate web server which serves STATIC_ROOT, and enter
#  the server's URL as the STATIC_URL.
#  For example, cd to your STATIC_ROOT and enter `python -m http.server 8080`.
#
# You'll want to re-run `collectstatic` whenever a static file (such as JS or
# CSS) is updated. You can run it with the `--clear` option to remove any
# obsolete files.
#DEBUG=False
#MEDIA_URL=http://localhost:8070/
#STATIC_URL=http://127.0.0.1:8080/

# This should log database queries to a file in your LOG_DIR. Useful when
# debugging database-querying code.
#LOG_DATABASE_QUERIES=True


#
# Other recommended settings
#

# Should set this when using spacer. This distinguishes your server instance's jobs
# from other instances' jobs in the AWS Batch dashboard. For example, you could
# make it 'dev_' followed by your name.
#SPACER_JOB_HASH=your_hash_here

# Recommended when running unit tests or when just trying out classifiers in
# dev environments. This lowers the image count requirement for training, thus
# greatly speeding up any tests involving setting up training data.
#MIN_NBR_ANNOTATED_IMAGES=2

# Recommended when trying out the front page map. Again, the regular image
# count requirements to get markers to appear on the map (or appear with higher
# levels of emphasis) can be onerous for testing purposes. Lower the
# requirements here.
#MAP_IMAGE_COUNT_TIERS=5,20,50

# If you're trying out the front page image carousel, you'll have to set this
# image count to something higher than 0, and specify at least that many
# image IDs here.
#CAROUSEL_IMAGE_COUNT=2
#CAROUSEL_IMAGE_POOL=123,124,125

# If you're running the Selenium tests, you'll have to specify the browsers
# on your system which Selenium can run on. Tests will run faster on headless
# browsers.
# This is a JSON array of hashes. Unfortunately it all has to be typed on one
# line, because django-environ only seems to support single-line settings in
# .env. If on Windows, be sure to type paths with forward slashes.
# Each hash supports the following keys:
#
# name
#   (Required) Name of the browser. Not case sensitive.
#   Supported: 'Firefox', 'Chrome'.
# webdriver
#   Absolute path to the web driver program, such as geckodriver.exe for
#   Firefox on Windows. If not specified, it searches your PATH for the
#   web driver.
# browser_binary
#   Absolute path to the browser binary, such as firefox.exe for Firefox
#   on Windows. If not specified, it looks on your PATH or your Windows
#   registry.
#   Only applies to Firefox.
#SELENIUM_BROWSERS=[{"name": "Chrome", "webdriver": "C:/Webdrivers/chromedriver.exe", "options": ["--headless"]}, {"name": "Firefox", "webdriver": "C:/Webdrivers/geckodriver.exe", "browser_binary": "C:/FirefoxPortable/default/App/firefox64/firefox.exe", "options": ["-headless"]}]
