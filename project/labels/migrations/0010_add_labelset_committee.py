# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2016-10-12 04:14
from __future__ import unicode_literals

from django.db import migrations
from django.conf import settings
from django.core.management.sql import emit_post_migrate_signal


def create_labelset_committee_user_group(
        apps, schema_editor, with_create_permissions=True):
    Group = apps.get_model('auth', 'Group')
    Permission = apps.get_model('auth', 'Permission')

    group = Group(name="Labelset Committee")
    group.save()

    perms = []
    perm_codes = ['change_label', 'verify_label']
    for perm_code in perm_codes:
        try:
            perm = Permission.objects.get(
                codename=perm_code, content_type__app_label='labels')
        except Permission.DoesNotExist:
            # If this is the first round of migrations ever run since the
            # relevant permissions and content types were defined
            # (e.g. in unit tests), then permissions and content types
            # will have to be created.
            # They're normally created as part of the post-migration signal.
            # We will trigger this signal manually to create the perms/ctypes.
            # https://code.djangoproject.com/ticket/23422#comment:20

            # This particular function signature may change in some Django
            # versions, but it works in Django 1.9.5 at least.
            emit_post_migrate_signal(0, False, 'default')

            # Try getting the perm again
            perm = Permission.objects.get(
                codename=perm_code, content_type__app_label='labels')
        perms.append(perm)

    group.permissions.add(*perms)


def delete_labelset_committee_user_group(apps, schema_editor):
    Group = apps.get_model('auth', 'Group')
    group = Group.objects.get(name="Labelset Committee")
    group.delete()


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('labels', '0009_add_verified_field_and_permission'),

        # The manual call of the post-migration signal may fail
        # unless the contenttypes migrations and sites migrations
        # (if that app is used) run first.
        # https://code.djangoproject.com/ticket/23422#comment:25
        #
        # Although the linked comment uses __latest__ as the dependency, that
        # is not a good idea because if contenttypes or sites gets a new
        # migration down the road, then we'll get an
        # InconsistentMigrationHistory error: labels 0010 was already run, but
        # something it depends on has not yet run.
        #
        # Also, during CoralNet's development, we had the Django sites app
        # originally, then we removed the dependency, then we re-added it for
        # the blog app. Somewhere during all of that, we moved from South
        # migrations to Django's built-in migrations. So depending on the
        # history of your CoralNet site instance + database, you may need to do
        # something weird with the sites dependency below:
        #
        # - If your DB has no sites table, and you have already run this
        #   labels 0010 migration, you'll want to:
        #   - Comment out the sites dependency below
        #   - `manage.py migrate`
        #   - Uncomment the dependency
        #
        # - If your DB has the sites table, but no sites migration history, and
        #   you have already run this labels 0010 migration, you'll want to:
        #   - Comment out the sites dependency below
        #   - `manage.py migrate sites 0001 --fake`
        #   - `manage.py migrate`
        #   - Uncomment the dependency
        ('contenttypes', '0002_remove_content_type_name'),
        ('sites', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(
            create_labelset_committee_user_group,
            delete_labelset_committee_user_group,
        ),
    ]
