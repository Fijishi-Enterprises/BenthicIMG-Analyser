from __future__ import unicode_literals
from six.moves import collections_abc

from rest_framework.views import exception_handler as default_exception_handler


def exception_handler(exc, context):
    """
    Customize django-rest-framework's exception handling.
    https://www.django-rest-framework.org/api-guide/exceptions/#custom-exception-handling
    """
    # Call REST framework's default exception handler first,
    # to get the standard error response.
    response = default_exception_handler(exc, context)

    # If generated by DRF, the error details won't be wrapped
    # in a top-level 'errors' member. Ensure it is wrapped so
    # that it complies with jsonapi.org.
    if 'errors' not in response.data:
        # Also ensure we have a list of errors.
        if not isinstance(response.data, collections_abc.Sequence):
            response.data = [response.data]
        response.data = {'errors': response.data}

    return response


class ApiRequestDataError(Exception):
    """
    Error regarding the data passed in an API request. Doesn't match the
    expected format, number values are beyond the max/min allowed, etc.

    Sets an error_dict attribute which follows the jsonapi.org format for error
    objects.
    """
    def __init__(self, message, json_path=None, parameter=None):
        """
        :param message: The error message. Used in the 'detail' member.
        :param json_path: A list corresponding to a JSON pointer
          (https://tools.ietf.org/html/rfc6901). For example, ['abc', 0, 'def']
          corresponds to '/abc/0/def'.
        :param parameter: Name of the request parameter associated with the
          error.
        """
        source_dict = dict()

        if json_path is not None:
            # [] -> '/'
            # ['data'] -> '/data'
            # ['data', 0] -> '/data/0'
            source_dict['pointer'] = '/' + '/'.join(
                [str(part) for part in json_path])

        if parameter:
            source_dict['parameter'] = parameter

        self.error_dict = dict(detail=message)
        if source_dict:
            self.error_dict['source'] = source_dict
