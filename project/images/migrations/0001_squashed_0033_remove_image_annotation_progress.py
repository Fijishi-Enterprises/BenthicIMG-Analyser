# Generated by Django 1.11.29 on 2021-03-26 21:07
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import easy_thumbnails.fields
import images.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('labels', '0001_squashed_0012_field_string_attributes_to_unicode'),
    ]

    operations = [
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('visibility', models.CharField(choices=[('b', 'Public'), ('v', 'Private')], default='b', max_length=1)),
                ('create_date', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('description', models.TextField()),
                ('affiliation', models.CharField(max_length=200)),
                ('key1', models.CharField(default='Aux1', max_length=50, verbose_name='Aux. metadata 1')),
                ('key2', models.CharField(default='Aux2', max_length=50, verbose_name='Aux. metadata 2')),
                ('key3', models.CharField(default='Aux3', max_length=50, verbose_name='Aux. metadata 3')),
                ('key4', models.CharField(default='Aux4', max_length=50, verbose_name='Aux. metadata 4')),
                ('key5', models.CharField(default='Aux5', max_length=50, verbose_name='Aux. metadata 5')),
                ('default_point_generation_method', models.CharField(default='m_200', help_text="When we create annotation points for uploaded images, this is how we'll generate the point locations. Note that if you change this setting later on, it will NOT apply to images that are already uploaded.", max_length=50, verbose_name='Point generation method')),
                ('image_annotation_area', models.CharField(help_text="This defines a rectangle of the image where annotation points are allowed to be generated.\nFor example, X boundaries of 10% and 95% mean that the leftmost 10% and the rightmost 5% of the image will not have any points. Decimals like 95.6% are allowed.\nLater, you can also set these boundaries as pixel counts on a per-image basis; for images that don't have a specific value set, these percentages will be used.", max_length=50, null=True, verbose_name='Default image annotation area')),
                ('enable_robot_classifier', models.BooleanField(default=True, help_text="With this option on, the automatic classification system will go through your images and add unconfirmed annotations to them. Then when you enter the annotation tool, you will be able to start from the system's suggestions instead of from a blank slate.", verbose_name='Enable robot classifier')),
                ('longitude', models.CharField(blank=True, max_length=20)),
                ('latitude', models.CharField(blank=True, max_length=20)),
                ('labelset', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='labels.LabelSet')),
                ('confidence_threshold', models.IntegerField(default=100, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Confidence threshold (%)')),
                ('cpce_code_filepath', models.CharField(default='', max_length=1000, verbose_name='Local absolute path to the CPCe code file')),
                ('cpce_image_dir', models.CharField(default='', help_text='Ending slash can be present or not', max_length=1000, verbose_name='Local absolute path to the directory with image files')),
                ('feature_extractor_setting', models.CharField(choices=[('efficientnet_b0_ver1', 'EfficientNet (default)'), ('vgg16_coralnet_ver1', 'VGG16 (legacy)')], default='efficientnet_b0_ver1', max_length=50, verbose_name='Feature extractor')),
            ],
            options={
                'permissions': (('source_view', 'View'), ('source_edit', 'Edit'), ('source_admin', 'Admin')),
            },
        ),
        migrations.CreateModel(
            name='Metadata',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=200, verbose_name='Name')),
                ('photo_date', models.DateField(blank=True, help_text='Format: YYYY-MM-DD', null=True, verbose_name='Date')),
                ('latitude', models.CharField(blank=True, max_length=20, verbose_name='Latitude')),
                ('longitude', models.CharField(blank=True, max_length=20, verbose_name='Longitude')),
                ('depth', models.CharField(blank=True, max_length=45, verbose_name='Depth')),
                ('height_in_cm', models.IntegerField(blank=True, help_text='The number of centimeters of substrate the image covers, from the top of the image to the bottom.', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Height (cm)')),
                ('annotation_area', models.CharField(blank=True, help_text='This defines a rectangle of the image where annotation points are allowed to be generated. If you change this, then new points will be generated for this image, and the old points will be deleted.', max_length=50, null=True, verbose_name='Annotation area')),
                ('camera', models.CharField(blank=True, max_length=200, verbose_name='Camera')),
                ('photographer', models.CharField(blank=True, max_length=45, verbose_name='Photographer')),
                ('water_quality', models.CharField(blank=True, max_length=45, verbose_name='Water quality')),
                ('strobes', models.CharField(blank=True, max_length=200, verbose_name='Strobes')),
                ('framing', models.CharField(blank=True, max_length=200, verbose_name='Framing gear used')),
                ('balance', models.CharField(blank=True, max_length=200, verbose_name='White balance card')),
                ('comments', models.TextField(blank=True, max_length=1000, verbose_name='Comments')),
                ('aux1', models.CharField(blank=True, max_length=50)),
                ('aux2', models.CharField(blank=True, max_length=50)),
                ('aux3', models.CharField(blank=True, max_length=50)),
                ('aux4', models.CharField(blank=True, max_length=50)),
                ('aux5', models.CharField(blank=True, max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('original_file', easy_thumbnails.fields.ThumbnailerImageField(height_field='original_height', upload_to=images.models.get_original_image_upload_path, width_field='original_width')),
                ('original_width', models.IntegerField()),
                ('original_height', models.IntegerField()),
                ('upload_date', models.DateTimeField(auto_now_add=True, verbose_name='Upload date')),
                ('point_generation_method', models.CharField(blank=True, max_length=50, verbose_name='How points were generated')),
                ('metadata', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='images.Metadata')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='images.Source')),
                ('uploaded_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('cpc_content', models.TextField(default='', verbose_name='File content of last .cpc uploaded for this image')),
                ('cpc_filename', models.CharField(default='', max_length=1000, verbose_name='Filename of last .cpc uploaded for this image')),
            ],
        ),
        migrations.CreateModel(
            name='Point',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('row', models.IntegerField()),
                ('column', models.IntegerField()),
                ('point_number', models.IntegerField()),
                ('annotation_status', models.CharField(blank=True, max_length=1)),
                ('image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='images.Image')),
            ],
        ),
        migrations.CreateModel(
            name='SourceInvite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_perm', models.CharField(choices=[('source_view', 'View'), ('source_edit', 'Edit'), ('source_admin', 'Admin')], max_length=50)),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name=b'invites_received', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name=b'invites_sent', to=settings.AUTH_USER_MODEL)),
                ('source', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='images.Source')),
            ],
            options={
                'unique_together': set([('recipient', 'source')]),
            },
        ),
    ]
