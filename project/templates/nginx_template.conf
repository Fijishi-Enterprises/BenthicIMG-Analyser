# This conf file was generated by a Django management command.

# http directives go at the top level here.

# Don't display nginx version in nginx's generic error pages.
server_tokens off;

# Increase this if nginx startup errors with "could not build
# server_names_hash, you should increase server_names_hash_bucket_size".
# Apparently this should be a power of 2.
# http://nginx.org/en/docs/http/server_names.html
server_names_hash_bucket_size 128;

server {
    {% if use_https %}
    listen 443 ssl;
    ssl_certificate /etc/letsencrypt/live/coralnet.ucsd.edu/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/coralnet.ucsd.edu/privkey.pem;

    # From https://weakdh.org/sysadmin.html (2016.11.22)
    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
    ssl_prefer_server_ciphers on;
    {% else %}
    listen 80;
    {% endif %}

    # Only answer requests that have one of these host header values.
    # This prevents host header spoofing attacks.
    server_name {{ nginx_allowed_hosts }};

    root {{ site_dir }};

    # If a maintenance HTML exists, serve it with a 503 code.
    # http://serverfault.com/a/310825/ - Note that 'if' is sometimes
    # considered unsafe, but at the server-block level it's fine.
    if (-f $document_root/tmp/maintenance.html) {
        return 503;
    }
    error_page 503 @maintenance;
    location @maintenance {
        rewrite ^(.*)$ /tmp/maintenance.html break;
    }

    # Static file requests: Serve this URL pattern using this directory.
    location /static {
        alias {{ static_root }};
    }

    # Other requests: Handle with gunicorn.
    location / {
        # gunicorn is assumed to be bound to this host and port.
        # As a result of this proxy pass,
        # the working value of Django's ALLOWED_HOSTS is 127.0.0.1.
        proxy_pass http://127.0.0.1:8001;

        {% if use_https %}
        # Tell Django that the original request was secure.
        # http://stackoverflow.com/a/19637196/
        # https://docs.djangoproject.com/en/dev/ref/settings/#secure-proxy-ssl-header
        proxy_set_header X-Forwarded-Proto $scheme;
        {% endif %}
        
        # Request timeout.
        # Note that gunicorn also has a timeout period. The lower of the
        # gunicorn/nginx timeouts is the effective timeout period.
        proxy_read_timeout 604800s;
        
        # Upload size limit.
        # This is just a failsafe in case our Django app doesn't specify a
        # size limit in every possible upload case.
        #
        # Our Django app can display a helpful error message, and nginx can't.
        # So, set this strictly higher than every upload filesize limit
        # specified in the Django settings.
        client_max_body_size 40m;
    }
}

{% if use_https %}
server {
    # Redirect any requests on port 80 (http) to https.
    listen 80;
    server_name {{ nginx_allowed_hosts }};
    rewrite ^ https://$host$request_uri? permanent;
}
{% endif %}

server {
    # "default_server" explicitly indicates that this services any requests
    # that don't match the other server blocks' port/server_name.
    listen 80 default_server;

    # Respond with an nginx "No response" code.
    return 444;
}

{% if use_https %}
server {
    # HTTPS equivalent of the above.
    listen 443 default_server ssl;
    ssl_certificate /etc/letsencrypt/live/coralnet.ucsd.edu/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/coralnet.ucsd.edu/privkey.pem;
    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
    ssl_prefer_server_ciphers on;

    return 444;
}
{% endif %}
